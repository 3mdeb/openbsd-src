.\"	$OpenBSD$
.\"
.\" Copyright (c) 2022 3mdeb <contact@3mdeb.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: September 16 2022 $
.Dt EFI 4 amd64
.Os
.Sh NAME
.Nm efi
.Nd EFI services
.Sh SYNOPSIS
.Cd "efi* at bios0"
.Sh DESCRIPTION
The
.Nm
driver provides support for EFI services offered by UEFI
firmware implementations.
The driver is used for reading and setting the Real Time Clock,
performing reboot and shutdown and accessing ESRT (EFI System Resource Table)
via
.Xr ioctl 2
calls.
.Pp
The
.Nm
driver implements the following
.Xr ioctl 2
calls.
They are defined in
.In dev/efi/efiio.h
with support structures in
.In dev/efi/efi.h .
.Bl -tag -width Ds
.It Dv EFIIOC_GET_TABLE
.Pq Li "struct efi_get_table_ioc"
Read an EFI table.
The argument structure is as follows:
.Bd -literal -offset indent
struct efi_get_table_ioc {
	void *buf;		/* Pointer to userspace buffer */
	struct uuid uuid;	/* UUID to look up */
	size_t table_len;	/* Table size */
	size_t buf_len;		/* Size of the buffer */
};
.Ed
.Pp
The following UUIDs are accepted (defined in
.In dev/efi/efi.h ):
.Bd -literal -offset indent
#define EFI_TABLE_ESRT \\
	{0xb122a263,0x3661,0x4f68,0x99,0x29,{0x78,0xf8,0xb0,0xd6,0x21,0x80}}
.Ed
.It Dv EFIIOC_VAR_GET
.Pq Li "struct efi_var_ioc"
Read an EFI variable specified by a combination of UUID and its name.
The argument structure is the same for all
.Dv EFIIOC_VAR_* :
.Bd -literal -offset indent
struct efi_var_ioc {
	efi_char *name;         /* User pointer to name, in UCS2 chars */
	size_t namesize;        /* Number of *bytes* in the name including
				   terminator */
	struct uuid vendor;     /* Vendor's UUID for variable */
	uint32_t attrib;        /* Attributes */
	void *data;             /* User pointer to value */
	size_t datasize;        /* Number of *bytes* in the value */
};
.Ed
"namesize" must cover all bytes of the name and two terminating zeros (each
"efi_char" is 2 bytes).
Zero "datasize" is a request to fill it in, in which case "data" is ignored.
Input value of "attrib" is irrelevant for this call, but its assigned to.
.It Dv EFIIOC_VAR_NEXT
.Pq Li "struct efi_var_ioc"
Obtain name of the next EFI variable.
First call should be done with zero "namesize" and zeroed "vendor".
"name" and "namesize" should be eare updated on each call.
All other fields are ignored.
.It Dv EFIIOC_VAR_SET
.Pq Li "struct efi_var_ioc"
Write or delete an EFI variable specified by a combination of UUID and its name.
Normally uses all fields of the input structure.
Zero size makes "data" field irrelevant and is treated as a request to delete
a variable (but not necessarily reclaim the space it took, a reboot might be
needed for that).
.El
.Sh SEE ALSO
.Xr intro 4
.Sh HISTORY
The
.Nm
device driver first appeared in
.Ox 7.3 .
.Sh AUTHORS
.An -nosplit
The
.Nm
driver was written by
.An Mark Kettenis Aq Mt kettenis@openbsd.org .
